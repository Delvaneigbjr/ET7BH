/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define K_ad    0.218
#define K_filter 1
#define B2_k 1
#define B1_k 1
#define B0_k 1
#define A1_k 1
#define A0_k 1
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
static void RAMPA_SUBIDA(void);
static void RAMPA_DESCIDA(void);
static void INICIALIZACAO(void);
static void PWM_TRIP(void);
static void MALHA_ABERTA(void);
static void MALHA_FECHADA(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



int read=0,i=0, j=0,a=0, state=0,flag_start=0, flag_mf=0;
float read_f=0,read_pwm=0,vetv[]={0,0,0,0,0,0};
//float y_k=0,e_k=0,uk1=0,uk2=0,yk1=0,yk2=0;
float yk[3]={0},uk[3]={0},e_k=0;
float V_o=0,v_ref=0;

uint32_t AD_RES_BUFFER[3];
float AD_RES_f[3];
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_ADC1_Init();
	MX_TIM3_Init();
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */



		// filtro média móvel, para obter uma leitura mais precisa, e com menor variação


		/*
		for (i = 0; i <= 5; i++)
		{
			HAL_ADC_Start(&hadc1);
			HAL_ADC_PollForConversion(&hadc1,100);
			read = HAL_ADC_GetValue(&hadc1);
			read_f = (float)(read*3.3)/4095 +read_f;
			vetv[i]=read_f;  // vetor tem que ser float também!
		}
		read_f = read_f/6;
		//   read=(int)4095*(read_f/3.3);
		 */

		switch(state)
		{
		case 0:
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, 0);
			/*enquanto não setar o flag start, a operação nao inicia*/
			if(flag_start==1)
				INICIALIZACAO();

			break;
		}
		case 1:
		{
			/*a rampa de subida é controlada pela variavel j, que é o delay entre cada incremento
	         da razão cíclica*/
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
			RAMPA_SUBIDA();
			break;
		}
		case 2:
		{
			/*aqui é operação em malha aberta, então é só ajustar a razão cíclica, neste caso
	         a conversão do ADC é utilizada para mudar ela, ou seja, o potenciômetro ajusta seu valor*/

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
			MALHA_ABERTA();

			break;
		}
		case 3:
		{
			/*aqui é operação em malha fechada, o controlador vai sintetizar uma razão cíclica, e vai
			 * compensar variação de carga também*/

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			MALHA_FECHADA();

			break;
		}
		case 4:
		{
			/*aqui é o desligamento, vai ocorrer uma rampa de descida.*/
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
			RAMPA_DESCIDA();
			break;
		}
		case 5:
		{
			/*aqui significa que ocorreu uma falha, ou seja, o pwm é desabilitado imediatamente.*/
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, 1);
			PWM_TRIP();

			break;
		}
		}




	}

	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 192;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = ENABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 3;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 2;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
	sConfig.Rank = 3;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
	TIM_OC_InitTypeDef sConfigOC = {0};

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
	htim3.Init.Prescaler = 0;
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim3.Init.Period = 1830;
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 715;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);

}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : PA9 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* rotina de interrupção do módulo PWM, na borda de descida do pulso */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim3)
{

	// leitura dos canais adc
	HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 3);

	// leitura do potênciometro para ajuste da razao ciclica em malha aberta
	read_pwm = (float)(AD_RES_BUFFER[0]*1830)/4095; // 1830 é o periodo do timer para um pwm de 20 kHz

	// leitura do sensor de tensão para operação em malha fechada
	read = (float)(AD_RES_BUFFER[1]*10)/4095;

	// leitura do sensor de corrente para operação em malha fechada
	AD_RES_f[2] = (float)(AD_RES_BUFFER[2]*10)/4095;

	// operação em malha fechada
	MALHA_FECHADA();


}
/*
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim3)
{


	// teste para saber se entrou aqui..
     a++;
    if(a>1000)
    {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
      a=0;
    }

}
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line0 (B0 Pin)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle The Output (LED) Pin
		state = 4;

	}
}
void RAMPA_SUBIDA(void)
{
	for(i=0;i<100;i++)
	{
		htim3.Instance->CCR1 = (htim3.Instance->ARR*i)/100;
		HAL_Delay(j);
		flag_start=0;
	}
	state = 2;
}

void RAMPA_DESCIDA(void)
{
	for(i=100;i>0;i--)
	{
		htim3.Instance->CCR1 = (htim3.Instance->ARR*i)/100;
		HAL_Delay(j);
	}
	state = 0;
	flag_start=0;
}

void PWM_TRIP(void)
{
	htim3.Instance->CCR1 = 0;
	state = 0;
	flag_start=0;
	flag_mf=0;
}

void MALHA_ABERTA(void)
{
	htim3.Instance->CCR1 = read_pwm;
	if (flag_mf==1)
		state=3;

}

void MALHA_FECHADA(void)
{
	if(flag_mf==1)
	{

		// atualiza o valor do erro na execução anterior
		//ek_1 = ek;

		V_o = read*K_ad*K_filter;
		e_k = v_ref-V_o;
		uk[0]=e_k;

		// calculo acao proporcional
		//u1=P*e_k;
		/*
	   	// Anti-windup da ação integral
	   	if((u2>1)&(ek>0))
	   	{
	   		u2=u2;

	   	}
	   	else if ((u2<0)&(ek<0)){
	   		u2=u2;

	   	}

	   	else
	   	{
	   		// calculo acao integral
	   		u2 = I*ek+u2;
	   	}

	   	// calculo acao diferencial

	   	u3 = (ek-ek_1)*D;

	   	// soma das ações

	   	u=u1+u2+u3;
		 */

		/*
		y_k = B2_k*e_k+B1_k*uk1+B0_k *uk2-A1_k*yk1-A0_k*yk2;

		uk2=uk1;
		uk1=e_k;

		yk2=yk1;
		yk1=y_k;
*/
		yk[0] = B2_k*uk[0]+B1_k*uk[1]+B0_k*uk[2]-A1_k*yk[1]-A0_k*yk[2];

		uk[2]=uk[1];
		uk[1]=uk[0];

		yk[2]=yk[1];
		yk[1]=yk[0];

		// Saturando a saída

		if(yk[0] >=1)
		{
			yk[0]=0.98;

		}

		else if (yk[0]<=0)
		{
			yk[0]=0.02;
		}

		// Atualizando a razão cíclica

		htim3.Instance->CCR1 = (htim3.Instance->ARR)*(1-yk[0]);

	}

}

void INICIALIZACAO(void)

{
	read=0;
	i=0;
	j=200;
	read_f=0;
	for(i=0;i<6;i++)
	{
		vetv[i]=0;
	}
	htim3.Instance->CCR1 = (htim3.Instance->ARR*(0))/100;
	state = 1;
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
